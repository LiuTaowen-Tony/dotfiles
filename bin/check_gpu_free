#!/bin/bash

verbose=0
gpu_ids_str=""
gpu_ids=()
opt=""

# Parse options: -v for verbose, and the last argument for GPU IDs
while getopts ":v" opt; do
  case ${opt} in
    v)
      verbose=1
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 2
      ;;
  esac
done
shift $((OPTIND - 1))

# After shifting, the last argument is the GPU IDs string
gpu_ids_str=$1

if [ "$gpu_ids_str" == "all" ]; then
  # Query all available GPU IDs
  gpu_ids=($(nvidia-smi --query-gpu=index --format=csv,noheader,nounits))
else
  # Split the input string into an array based on commas for specific GPUs
  IFS=',' read -r -a gpu_ids <<< "$gpu_ids_str"
fi

for gpu_id in "${gpu_ids[@]}"; do
  read mem_used gpu_util <<< $(nvidia-smi --query-gpu=memory.used,utilization.gpu --format=csv,noheader,nounits -i $gpu_id | awk -F', ' '{print $1, $2}')
  
  if [ "$verbose" -eq 1 ]; then
    echo "GPU $gpu_id: Memory Used = $mem_used MiB, Utilization = $gpu_util%"
  fi

  if [ "$mem_used" -gt 1024 ] || [ "$gpu_util" -gt 5 ]; then
    if [ "$verbose" -eq 1 ]; then
      echo "GPU $gpu_id does not meet the criteria."
    fi
    exit 1 # If any GPU does not meet the criteria, return 1 immediately
  fi
done

if [ "$verbose" -eq 1 ]; then
  echo "All specified GPUs meet the criteria."
fi

exit 0 # If all GPUs meet the criteria, return 0

