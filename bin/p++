#!/usr/bin/env python3

import argparse
import os
import subprocess
import datetime
import random
import shutil
import sys


def find_project_root():
    venv_env = os.environ.get("VIRTUAL_ENV")
    if not venv_env:
        return None

    # Get the parent directory of the venv
    venv_dir = os.path.dirname(venv_env)
    link_back_file = os.path.join(venv_dir, "link_back.txt")

    if os.path.exists(link_back_file):
        with open(link_back_file, "r") as f:
            project_root = f.readline().strip()
            return project_root
    return None


def create_venv(venvs_dir):
    cur_dir = os.getcwd()
    base_name = os.path.basename(cur_dir)
    random_name = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=8))
    name = f"{random_name}-{base_name}"

    actual_venv_dir = os.path.join(venvs_dir, name, base_name)
    os.makedirs(actual_venv_dir, exist_ok=True)
    link_back = os.path.join(venvs_dir, name, "link_back.txt")
    with open(link_back, "w") as f:
        f.write(cur_dir + "\n")

    subprocess.run(["python3", "-m", "venv", actual_venv_dir], check=True)
    os.symlink(actual_venv_dir, os.path.join(cur_dir, ".venv"))
    return actual_venv_dir


def remove_unused_venvs(venvs_dir):
    for item in os.listdir(venvs_dir):
        item_path = os.path.join(venvs_dir, item)
        if os.path.isdir(item_path):
            link_back_path = os.path.join(item_path, "link_back.txt")
            if os.path.exists(link_back_path):
                with open(link_back_path, "r") as f:
                    proj_dir = f.readline().strip()
                if not os.path.exists(proj_dir):
                    print(f"Removing unused venv: {item_path}")
                    shutil.rmtree(item_path)
                    continue

                venv_link = os.path.join(proj_dir, ".venv")
                if os.path.exists(venv_link):
                    proj_venv = os.path.realpath(venv_link)
                    proj_venv_parent = os.path.dirname(proj_venv)

                    if proj_venv_parent != item_path:
                        print(f"Removing unused venv: {item_path}")
                        shutil.rmtree(item_path)


def install_previous():
    project_root = find_project_root()
    if not project_root:
        print("Could not find project root. Cannot install previous packages.")
        return

    history_file = os.path.join(project_root, "pip_install_history.sh")
    if history_file:
        with open(history_file, "r") as f:
            for line in f:
                if "pip3 install" in line:
                    try:
                        command = line.split("#")[0].strip()
                        print(f"Installing: {command}")
                        subprocess.run(command.split(), check=True)
                    except Exception as e:
                        print(f"Error installing from history: {e}")
    else:
        print("No install history file found.")

def parse_venv_dir_argument(args):
    if len(args) > 2 and args[2] == "--venv-dir":
        if len(args) < 4:
            print("--venv-dir requires a directory argument")
            sys.exit(1)
        return args[3]
    return None

def install(pip_args):
    project_root = find_project_root()
    if not project_root:
        print( "Not in a virtual environment or project root not found. Forwarding to system pip...")
        subprocess.run(["pip3", "install"] + pip_args, check=True)
        return

    history_file = os.path.join(project_root, "pip_install_history.sh")
    if not os.path.exists(history_file):
        with open(history_file, "w") as f:
            print(f"Created pip install history file at {history_file}")
        os.chmod(history_file, 0o755)  # Make executable

    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(history_file, "a") as f:
        f.write(f"pip3 install {' '.join(pip_args)} # {timestamp}\n")

    print(f"Installation command logged: {' '.join(pip_args)}")

    subprocess.run(["pip3", "install"] + pip_args, check=True)


def print_usage():
    print("Usage: python script_name.py <command> [args...]")
    print("Available commands:")
    print("  create_venv [--venv-dir <dir>]")
    print("  install [--venv-dir <dir>] <package1> <package2> ...")
    print("  install_previous")
    print("  remove_unused [--venv-dir <dir>]")

def main():
    venv_dir_env = os.environ.get("VIRTUAL_ENV_DIR")
    default_venvs_dir = venv_dir_env if venv_dir_env else os.path.expanduser("~/venvs")

    if len(sys.argv) < 2:
        print_usage()
        sys.exit(1)

    command = sys.argv[1]
    if command == "create_venv":
        venvs_dir = parse_venv_dir_argument(sys.argv) or default_venvs_dir
        create_venv(venvs_dir) 
        remove_unused_venvs(venvs_dir)
    elif command == "install":
        if len(sys.argv) < 3:
            print("Usage: python script_name.py install <package1> <package2> ...")
            sys.exit(1)
        pip_args = sys.argv[2:] 
        install(pip_args) 
    elif command == "install_previous":
        install_previous()
    elif command == "remove_unused":
        venvs_dir = parse_venv_dir_argument(sys.argv) or default_venvs_dir
        remove_unused_venvs(venvs_dir) 
    else:
        print(f"Unknown command: {command}")
        print_usage()
        sys.exit(1)    


if __name__ == "__main__":
    main()
