#!/usr/bin/env python3

import argparse
import os
import subprocess
import datetime
import random
import shutil
import sys


def find_project_root():
    venv_env = os.environ.get("VIRTUAL_ENV")
    if not venv_env:
        return None

    # Get the parent directory of the venv
    venv_dir = os.path.dirname(venv_env)
    link_back_file = os.path.join(venv_dir, "link_back.txt")

    if os.path.exists(link_back_file):
        with open(link_back_file, "r") as f:
            project_root = f.readline().strip()
            return project_root
    return None


def create_venv(venv_dir):
    cur_dir = os.getcwd()
    base_name = os.path.basename(cur_dir)
    random_name = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=8))
    name = f"{random_name}-{base_name}"

    actual_venv_dir = os.path.join(venv_dir, name, base_name)
    os.makedirs(actual_venv_dir, exist_ok=True)
    link_back = os.path.join(venv_dir, name, "link_back.txt")
    with open(link_back, "w") as f:
        f.write(cur_dir + "\n")

    subprocess.run(["python3", "-m", "venv", actual_venv_dir], check=True)
    os.symlink(actual_venv_dir, os.path.join(cur_dir, ".venv"))
    return actual_venv_dir


def remove_unused_venvs(venv_dir):
    for item in os.listdir(venv_dir):
        item_path = os.path.join(venv_dir, item)
        if os.path.isdir(item_path):
            link_back_path = os.path.join(item_path, "link_back.txt")
            if os.path.exists(link_back_path):
                with open(link_back_path, "r") as f:
                    proj_dir = f.readline().strip()
                if not os.path.exists(proj_dir):
                    print(f"Removing unused venv: {item_path}")
                    shutil.rmtree(item_path)
                    continue

                venv_link = os.path.join(proj_dir, ".venv")
                if os.path.exists(venv_link):
                    proj_venv = os.path.realpath(venv_link)
                    proj_venv_parent = os.path.dirname(proj_venv)

                    if proj_venv_parent != item_path:
                        print(f"Removing unused venv: {item_path}")
                        shutil.rmtree(item_path)


def install_previous(venv_dir):
    project_root = find_project_root()
    if not project_root:
        print("Could not find project root. Cannot install previous packages.")
        return

    history_file = os.path.join(project_root, "pip_install_history.sh")
    if history_file:
        with open(history_file, "r") as f:
            for line in f:
                if "pip3 install" in line:
                    try:
                        command = line.split("#")[0].strip()
                        print(f"Installing: {command}")
                        subprocess.run(command.split(), check=True)
                    except Exception as e:
                        print(f"Error installing from history: {e}")
    else:
        print("No install history file found.")


def main():
    venv_dir_env = os.environ.get("VIRTUAL_ENV_DIR")
    default_venv_dir = venv_dir_env if venv_dir_env else os.path.expanduser(
        "~/venvs")

    parser = argparse.ArgumentParser(
        description="Enhanced pip manager with venv management and history.")
    subparsers = parser.add_subparsers(dest="command", help="Sub-commands")

    # create_venv subcommand

    create_parser = subparsers.add_parser(
        "create_venv", help="Create a new virtual environment")

    create_parser.add_argument("--venv-dir", default=default_venv_dir,
                               help="Directory to store virtual environments (overrides env var)")

    # install subcommand

    install_parser = subparsers.add_parser("install", help="Install packages")
    install_parser.add_argument(
        "pip_args", nargs=argparse.REMAINDER, help="Arguments to pass to pip")

    # install_previous subcommand
    install_previous_parser = subparsers.add_parser(
        "install_previous", help="Install previously installed packages from history")
    install_previous_parser.add_argument(
        "--venv-dir", default=default_venv_dir, help="Directory to store virtual environments (overrides env var)")

    # remove_unused subcommand
    remove_parser = subparsers.add_parser(
        "remove_unused", help="Remove unused virtual environments")
    remove_parser.add_argument("--venv-dir", default=default_venv_dir,
                               help="Directory to store virtual environments (overrides env var)")

    args = parser.parse_args()
    if args.command == "create_venv":
        create_venv(args.venv_dir)
    elif args.command == "install":
        project_root = find_project_root()
        if not project_root:
            print(
                "Not in a virtual environment or project root not found. Forwarding to system pip...")
            subprocess.run(["pip3"] + args.pip_args, check=True)
            return

        history_file = os.path.join(project_root, "pip_install_history.sh")
        if not os.path.exists(history_file):
            with open(history_file, "w") as f:
                print(f"Created pip install history file at {history_file}")
            os.chmod(history_file, 0o755)  # Make executable

        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with open(history_file, "a") as f:
            f.write(f"pip3 {' '.join(args.pip_args)} # {timestamp}\n")

        print(f"Installation command logged: {' '.join(args.pip_args)}")

        subprocess.run(["pip3"] + args.pip_args, check=True)

    elif args.command == "install_previous":
        install_previous(args.venv_dir)

    elif args.command == "remove_unused":
        remove_unused_venvs(args.venv_dir)
    else:
        parser.print_help()


if __name__ == "__main__":
    main()
